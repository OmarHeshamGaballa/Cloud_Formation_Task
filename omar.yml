Parameters:
  EnvironmentName:
    Description: vpc
    Type: String
  EnvironmentName1:
    Description: public
    Type: String
  EnvironmentName2:
    Description: private
    Type: String  
  EnvironmentName3:
    Description: instance-name
    Type: String  
Resources:
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "192.168.0.0/16"
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1c" 
      VpcId: !Ref MyVPC
      CidrBlock: "192.168.10.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName1
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1b" 
      VpcId: !Ref MyVPC
      CidrBlock: "192.168.20.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName2
  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow SSH and HTTP access"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
  
  MyEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0dfcb1ef8550277af"
      InstanceType: "t2.micro"
      KeyName: "key-omar"
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName3